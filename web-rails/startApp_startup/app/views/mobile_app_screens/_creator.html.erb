<!-- ********************************************** -->
<!-- Pop up para editar el contenido de un elemento -->
<!-- ********************************************** -->
<div id="designPopup">
  <div id="contenido">
  	<div class="modal-header">
     	<button id="designPopupCloseButton" type="button" class="close" data-dismiss="modal">&times;</button>
  	 	<h4 class="modal-title">Editor del elemento</h4>
    </div>

		<div id="designPopupErrorMessage" class="alert alert-danger" style="display:none">
			<a href="#" class="close" onclick="hidePopupErrorMessage()">&times;</a>
		</div>

		<div class="form-horizontal">
			<!-- Background-color: Contenedor   -->
			<div class="form-group designElement contenedor-element wsContenedor-element">
			  <label class="control-label col-sm-2" for="designInput-background-color">Color fondo:</label>
			  <div class="col-sm-10 form-control-div">
			    <input id="designInput-background-color" type="text" class="jscolor {hash:true, styleElement:'none'}" name="background-color"> 
			  </div>
		 	</div>
			
			<!-- Height: Contenedor   -->
			<div class="form-group designElement contenedor-element wsContenedor-element">
			  <label class="control-label col-sm-2" for="designInput-height">Altura:</label>
			  <div class="col-sm-10">
			    <input id="designInput-height" type="text" class="form-control" name="height"> 
			  </div>
		 	</div>

			<!-- Border-style: Contenedor   -->
			<div class="form-group designElement contenedor-element wsContenedor-element">
			  <label class="control-label col-sm-2" for="designInput-background-color">Estilo borde:</label>
			  <div class="col-sm-10 form-control-div">
			    <input id="designInput-border-style" type="text" class="formControl" name="border-style"> 
			  </div>
		 	</div>

		 	<!-- Border-width: Contenedor   -->
			<div class="form-group designElement contenedor-element wsContenedor-element">
			  <label class="control-label col-sm-2" for="designInput-background-color">Tamaño borde:</label>
			  <div class="col-sm-10 form-control-div">
			    <input id="designInput-border-width" type="text" class="formControl" name="border-width"> 
			  </div>
		 	</div>

		 	<!-- Border-color: Contenedor   -->
			<div class="form-group designElement contenedor-element wsContenedor-element">
			  <label class="control-label col-sm-2" for="designInput-background-color">Color borde:</label>
			  <div class="col-sm-10 form-control-div">
			    <input id="designInput-border-color" type="text" class="jscolor {hash:true, styleElement:'none'}" name="border-color"> 
			  </div>
		 	</div>

		 	<!-- Text align: Contenedor   -->
			<div class="form-group designElement contenedor-element wsContenedor-element">
			  <label class="control-label col-sm-2" for="designInput-text-align">Alineanación:</label>
			  <div class="col-sm-10">
			    <input id="designInput-text-align" type="text" class="form-control" name="text-align"> 
			  </div>
		 	</div>

		 	<!-- Padding: Contenedor, Texto   -->
			<div class="form-group designElement contenedor-element texto-element wsContenedor-element">
			  <label class="control-label col-sm-2" for="designInput-padding">Padding:</label>
			  <div class="col-sm-10">
			    <input id="designInput-padding" type="text" class="form-control" name="padding"> 
			  </div>
		 	</div>

		 	<!-- Value Text: Texto   -->
		 	<div class="form-group designElement texto-element">
			  <label class="control-label col-sm-2" for="designInput-height">Texto:</label>
			  <div class="col-sm-10">
			    <input id="designInput-value" type="text" class="form-control" name="value"> 
			  </div>
		 	</div>

		 	<!-- WS Text: Nombre de la variable devuelta por el WS (si usa)   -->
		 	<div class="form-group designElement texto-element">
			  <label class="control-label col-sm-2" for="designInput-height">Campo Servicio:</label>
			  <div class="col-sm-10">
			    <input id="designInput-campoWS" type="text" class="form-control" name="campoWS"> 
			  </div>
		 	</div>

		 	<!-- URL WS: Url del WS (si usa)   -->
		 	<div class="form-group designElement wsElem-element">
			  <label class="control-label col-sm-2" for="designInput-height">Url Servicio:</label>
			  <div class="col-sm-10">
			    <input id="designInput-urlWS" type="text" class="form-control" name="urlWS"> 
			  </div>
		 	</div>

			<!-- font-size: Texto   -->
		 	<div class="form-group designElement texto-element">
			  <label class="control-label col-sm-2" for="designInput-font-size">Tamaño letra:</label>
			  <div class="col-sm-10">
			    <input id="designInput-font-size" type="text" class="form-control" name="font-size"> 
			  </div>
		 	</div>
	   		
	  	<div class="form-group"> 
			  <div class="col-sm-offset-2 col-sm-10">
			  	<div id="designPopupSaveButton" class="DesignPopupSaveButton btn btn-default">GUARDAR</div>
			  </div>
			</div>
		</div>
  </div>
</div>

<!-- ********************************************** -->
<!-- Pop up para agregar elementos dentro de otro   -->
<!-- ********************************************** -->
<div id="elemsCreationPopup">   
  <div id="contenidoElems">
  	<div class="modal-header">
     	<button id="elemsCreationPopupCloseButton" type="button" class="close" data-dismiss="modal" onclick="closeAddElementsPopup();">&times;</button>
     	<h4 class="modal-title">Agregar del elemento</h4>
    </div>

		<div class="build-screen-buttons-options-container">
			<div class="build-screen-section-title">Elementos</div>
			<div class="build-screen-buttons-container">
				<div id="div-button-elem-container-creator" class="build-screen-button-div tooltipCustom">
					<span style="margin: auto 0px;line-height:15px;">Contenedor</span>
					<span class="tooltiptext">Agregar</span>
				</div>
				<div id="div-button-elem-text-creator" class="build-screen-button-div tooltipCustom">
					<span style="margin: auto 0px;line-height:15px;">Texto</span>
					<span class="tooltiptext">Agregar</span>
				</div>
				<div id="div-button-elem-WsContainer-creator" class="build-screen-button-div tooltipCustom">
					<span style="margin: auto 0px;line-height:15px;">Contenedor Datos WS</span>
					<span class="tooltiptext">Agregar</span>
				</div>
			</div>
		</div>
  </div>
</div>


<!-- ********************************************** -->
<!-- Aca arranca la pantalla                        -->
<!-- ********************************************** -->

<div class="build-screen-container">
	<div class="build-screen-elem-options-container">
		<div class="build-screen-section-title">Constructor</div>
		<div id="build-screen-elem-options" class="build-screen-elem-options">
			<%= @mobile_app_screen.editor_html.html_safe if @mobile_app_screen.editor_html %>
		</div>
	</div>

	<center><div class="screenEditionContainer">
  	  <div class="screenEditionHeadContent"><div><%= Time.zone.now.to_s(:time) %></div></div>
  	  <div id="build-screen-area" class="build-screen-area">
	    <%= @mobile_app_screen.raw_html.html_safe if @mobile_app_screen.raw_html %>
	  </div>
	<div></center>

	<div class="build-screen-buttons-options-container">
		<div class="build-screen-section-title">Herramientas</div>
		<div class="build-screen-buttons-container">
			<div id="div-button" class="build-screen-button-div tooltipCustom" onclick="addPanelElement('contenedor')">
				<span style="margin: auto 0px;line-height:15px;">Contenedor</span>
				<span class="tooltiptext">Agregar</span>
			</div>

			<div id="div-button" class="build-screen-button-div tooltipCustom" onclick="addPanelElement('texto')">
				<span style="margin: auto 0px;line-height:15px;">Texto</span>
				<span class="tooltiptext">Agregar</span>
			</div>

			<div id="div-button" class="build-screen-button-div tooltipCustom" onclick="addPanelElement('wsElem')">
				<span style="margin: auto 0px;line-height:15px;">Servicio Externo (WS)</span>
				<span class="tooltiptext">Agregar</span>
			</div>

			<div id="div-button" class="build-screen-button-div tooltipCustom" onclick="addPanelElement('wsContenedor')">
				<span style="margin: auto 0px;line-height:15px;">Contenedor Datos WS</span>
				<span class="tooltiptext">Agregar</span>
			</div>

		</div>
	</div>
</div>


<!-- ********************************************** -->
<!-- Funciones de JS                                -->
<!-- ********************************************** -->

<script type="text/javascript">
	function avoidRunWS(){
		return true;	
	}


	//Borra un elemento y sus elementos hijos de la pantalla
	function deleteElem(elemId, elemEditorId){
		$("#"+elemId).remove();
		$("#"+elemEditorId).remove();
		//TODO: tengo que ver como borro en el wsElemToCopy el elemento container (puedo meter hardcode y ya)
		if(elemId == "wsElemToCopy")
			$("#wsElemCopiesContainer").remove();
	}

	//Agrega un elemento a la pantalla
	function addPanelElement(elementType, parentElem = "", parentElemEditor = ""){
		biggerDivIndex = -1;
		//Busco el idx del div mayor asi me aseguro de no repetir ids
		$('#build-screen-elem-options .builder-editor-elem-div').each(function(){
			elemId = $(this).attr('id');
			elemNumber = parseInt(elemId.replace("builder-editor-div-",""));
			if(elemNumber > biggerDivIndex){
				biggerDivIndex = elemNumber;
			}
		});
		biggerDivIndex++;

		//Elemento de pantalla visible
		elementId = "builder-div-" + biggerDivIndex;
		
		if(elementType=="wsElem"){
			elem = '<div id="' + elementId + '" class="builder-elem-div" style="font-size: 10px; color: #000000;">';
			
			elem += '<div id="loading" style="display:none;text-align:center; position:absolute; top:0px;left:0px; width:100%;height:100%;"><div style="margin:auto; background-color:grey; opacity:0.8; width:100%;height:100%; font-size:20px;padding-top:60%;">LOADING</div></div>';

			//Cuando modifico la url en la parte de edicion, deberia pisar todo este div, usando el param que me pasaron en la parte que se concatena la url
			elem += '<script>';
			elem += '$(document).ready(function (){';	
				elem +=	'if ((typeof avoidRunWS === \'undefined\') || (!avoidRunWS())) {';
					elem += '$("#loading").show();';
					elem += '$.ajax({';
						elem += 'url: "http://www.mocky.io/v2/5872bafb0f0000b71ac6acb7",';
						elem += 'dataType: "jsonp"';
					elem += '}).then(function(response) {';
						elem += '$.each(response.data, function(index, dataArray){';
							//clone el divWS segun el id (como lo consigo? en el peor de los casos solo se puede llamar un WS por pantalla, entonces el id es algo fijo).
							elem += 'elemToClone = $("#wsElemToCopy").clone();';
							elem += 'elemToClone.attr("id", "wsDivCopy"+index);';
							//sacar el display none
							elem += 'elemToClone.css("display", "block");';
							elem += 'elemHeight = elemToClone.css("height");';
							elem += 'if(elemHeight.includes("%")){';
								elem += 'elemHeight = elemHeight.replace("%","");';
								elem += 'totalHeight = $("#build-screen-area").height();';
								elem += 'fixedHeight = totalHeight*elemHeight/100;';
								elem += 'elemToClone.css("height", fixedHeight+"px");';
							elem += '}';
							elem += '$.each(dataArray, function(key, value){';
								//aca cambio la data con la key dentro del id del elemento padre
								elem += '$("#wsElemCopiesContainer").append(elemToClone);';
								elem += '$("#wsDivCopy"+index+" .control-class-ws-"+key).html(value);';
							elem += '});';
						elem += '});';
						elem += '$("#loading").hide();';
					elem += '});';
					//.error ??
  			elem +=	'}';
			elem += '});';
			elem += '</'
			elem += 'script>';
			elem += '</div>';
		}
		else if(elementType=="wsContenedor"){
			elementId = "wsElemToCopy";
			elem = '<div id="' + elementId + '" class="builder-elem-div" style="display:none; width:100%; height:20%;  background-color: #0000DD;"></div>';
			elem += '<div id="wsElemCopiesContainer" class="builder-elem-div" style=""></div>';
		}
		else if(elementType=="texto"){
			elem = '<span id="' + elementId + '" class="builder-elem-div" style="font-size: 10px; color: #000000;">Texto</span>';	
		}else{
			//Container es el default
			elem = '<div id="' + elementId + '" class="builder-elem-div" style="width:100%; height:10%; background-color: #0000DD;"></div>';
		}
		
		
		if(parentElem != '')
			$("#"+parentElem).append(elem);
		else
			$("#build-screen-area").append(elem);

		//Elemento de edicion complementario
		elementEditorId = "builder-editor-div-" + biggerDivIndex;
		

		if(elementType=="wsElem"){
			elemEditor = '<div id="' + elementEditorId + '" class="builder-editor-elem-div" data-styles="">';
				elemEditor += '<div class="builder-editor-elem-div-properties" data-styles="">Servicio Externo (WS)';
					elemEditor += '<div class="deleteButton" onclick="deleteElem(\''+elementId+'\', \''+elementEditorId+'\')">BORRAR</div>';
					elemEditor += '<div class="deleteButton" onclick="showDesignPopup(\''+elementType+'\', \''+elementId+'\', \''+elementEditorId+'\')">EDITAR</div>';
				elemEditor += '</div>';
			elemEditor += '</div>';
		}
		else if(elementType=="wsContenedor"){
			elemEditor = '<div id="' + elementEditorId + '" class="builder-editor-elem-div" data-styles="">';
				elemEditor += '<div class="builder-editor-elem-div-properties" data-styles="">Contenedor WS';
					elemEditor += '<div class="deleteButton" onclick="deleteElem(\''+elementId+'\', \''+elementEditorId+'\')">BORRAR</div>';
					elemEditor += '<div class="deleteButton" onclick="showDesignPopup(\''+elementType+'\', \''+elementId+'\', \''+elementEditorId+'\')">EDITAR</div>';
					elemEditor += '<div class="deleteButton" onclick="insertElem(\''+elementId+'\', \''+elementEditorId+'\')">AGREGAR ELEM</div>';
				elemEditor += '</div>';
			elemEditor += '</div>';
		}
		else if(elementType=="texto"){
			elemEditor = '<div id="' + elementEditorId + '" class="builder-editor-elem-div" data-styles="">';
				elemEditor += '<div class="builder-editor-elem-div-properties" data-styles="">Texto';
					elemEditor += '<div class="deleteButton" onclick="deleteElem(\''+elementId+'\', \''+elementEditorId+'\')">BORRAR</div>';
					elemEditor += '<div class="deleteButton" onclick="showDesignPopup(\''+elementType+'\', \''+elementId+'\', \''+elementEditorId+'\')">EDITAR</div>';
				elemEditor += '</div>';
			elemEditor += '</div>';
		}else{
			elemEditor = '<div id="' + elementEditorId + '" class="builder-editor-elem-div" data-styles="">';
				elemEditor += '<div class="builder-editor-elem-div-properties" data-styles="">Contenedor';
					elemEditor += '<div class="deleteButton" onclick="deleteElem(\''+elementId+'\', \''+elementEditorId+'\')">BORRAR</div>';
					elemEditor += '<div class="deleteButton" onclick="showDesignPopup(\''+elementType+'\', \''+elementId+'\', \''+elementEditorId+'\')">EDITAR</div>';
					elemEditor += '<div class="deleteButton" onclick="insertElem(\''+elementId+'\', \''+elementEditorId+'\')">AGREGAR ELEM</div>';
				elemEditor += '</div>';
			elemEditor += '</div>';
		}
		//Idem sin el agregar elem, y Texto en vez de contenedor


		if(parentElemEditor != '')
			$("#"+parentElemEditor).append(elemEditor);
		else
			$("#build-screen-elem-options").append(elemEditor);


		//podria tener en el editor, un elemento que tenga los atributos que se van seteando, width:100%;color:red;...etc y parseo por el punto y coma. El atributo que no esta, tiene que tener el valor default (nunca se seteo)
	}

	//Se abre el popup de edicion del elemento en cuestion
	function showDesignPopup(elementType, elemId, elemEditorId) {
 		$("#designPopupSaveButton").on("click", function(){saveDivSettings(elemId, elemEditorId);});

 		//Agarro los estilos guardados en el elemntor editor y los vuelco en los campos del popup
 		stylesString = $("#"+elemEditorId).attr("data-styles");
 		stylesArray = stylesString.split(";");
		stylesArray.forEach(function(item){
			if(item != ""){
				//particularStyleArray = item.split(":");
				firstIndex = item.indexOf(":");

				p0 = item.substring(0, firstIndex);
				p1 = item.substring(firstIndex + 1);
				$("#designInput-"+p0).val(p1);
			}
		});

		/*stylePosition = styles.indexOf("background-color");
		if(stylePosition > -1){
			stylePosition
		}*/

		$("#designPopup .designElement").each(function(){
			if($(this).hasClass(elementType+"-element")){
				$(this).show();
			}else{
				$(this).hide();
			}
		});
		


		$("#designPopup").show();
		//Desde aca, antes de hacer el show puedo setear opciones dependiendo el elemento
	}

	//Se asigna la funcion de cierre al popup de edicion
	$("#designPopupCloseButton").click(function (){
	  closeDesignerPopup();
	});

	//Esconde los mensajes de error del popup (para que se dejen de mostrar si cierra el popup y lo vuelve a abrir)
	function hidePopupErrorMessage(){		
		$("#designPopupErrorMessage strong").each(function(){
   		$(this).remove();
   	});
   	$("#designPopupErrorMessage").hide();
	}

	//Se cierra el popup de edicion (Se limpianciertas cosas cuando se cierra)
	function closeDesignerPopup(){
		hidePopupErrorMessage();

		$("#designPopup").hide();
	  $("#designPopupSaveButton").off("click");
	  $("#designPopup input").each(function(){
			$(this).val("");
		});
	}

	//Se cierra el popup de agregado de elementos
	function closeAddElementsPopup(){
		$("#elemsCreationPopup").hide();
	  $("#div-button-elem-container-creator").off("click");
	  $("#div-button-elem-text-creator").off("click");
	  $("#div-button-elem-WsContainer-creator").off("click");
	}

	//Se guarda los cambios hechos en la edicion de un elemento
 	function saveDivSettings(elemId, elemEditorId) {
 		//("#designInput-background-color").val();
 		//Valido todo y si todo esta bien recien ahi empiezo a setear los valores
 		allFieldsValid = true;
 		$("#designPopup input").each(function(){
 			styleAttribute = $(this).attr('name');

 			//Solo tengo que validar los atributos del tipo de elemento en cuestion (es decir, los visibles)
			if($(this).is(':visible')){
				if(!validateFieldValue(styleAttribute, $(this).val())){
					allFieldsValid = false;
					errorMessage = '<strong>- ';
					errorMessage += elementsValidations[styleAttribute]["errorMessage"];
					errorMessage += '</strong>';
					$("#designPopupErrorMessage").append(errorMessage);
					//agregar mensaje de error en algun lado
 				}
 			}
 		});

 		if(!allFieldsValid){
 			$("#designPopupErrorMessage").show();
 			return;
 		}

 		//$("#"+elemEditorId).attr("data-styles", "");
 		$("#designPopup input").each(function(){
 			styleAttribute = $(this).attr('name');

 			//Solo tengo que usar los atributos del tipo de elemento en cuestion (es decir, los visibles)
			if($(this).is(':visible')){
	 			//chequeo casos particulares
	 			if(styleAttribute == "value"){
	 				$("#"+elemId).html($(this).val());
	 			}
				else if(styleAttribute == "campoWS"){
					//Para poder pisar el valor que viene en el ws, 
	 				$("#"+elemId).addClass("control-class-ws-"+$(this).val());
	 			}
	 			else if(styleAttribute == "urlWS"){
	 				elem = '<div id="loading" style="display:none;text-align:center; position:absolute; top:0px;left:0px; width:100%;height:100%;"><div style="margin:auto; background-color:grey; opacity:0.8; width:100%;height:100%; font-size:20px;padding-top:60%;">LOADING</div></div>';
	 				elem += '<script>';
					elem += '$(document).ready(function (){';	
					elem +=	'if ((typeof avoidRunWS === \'undefined\') || (!avoidRunWS())) {';
					elem += '$("#loading").show();';
					elem += '$.ajax({';
					elem += 'url: "'+$(this).val()+'",';
					elem += 'dataType: "jsonp"';
					elem += '}).then(function(response) {';
					//elem += '$.each(response.data, function(key, value){';
						elem += '$.each(response.data, function(index, dataArray){';
							//clone el divWS segun el id (como lo consigo? en el peor de los casos solo se puede llamar un WS por pantalla, entonces el id es algo fijo).
							elem += 'elemToClone = $("#wsElemToCopy").clone();';
							elem += 'elemToClone.attr("id", "wsDivCopy"+index);';
							//sacar el display none
							elem += 'elemToClone.css("display", "block");';
							elem += 'elemHeight = elemToClone.css("height");';


							elem += 'if(elemHeight.includes("%")){';
								elem += 'elemHeight = elemHeight.replace("%","");';
								elem += 'totalHeight = $("#build-screen-area").height();';
								elem += 'fixedHeight = totalHeight*elemHeight/100;';
								elem += 'elemToClone.css("height", fixedHeight+"px");';
							elem += '}';


							//elem += 'elemToClone.css("position", "absolute");';
							//id nuevo div = idFijo+index
						elem += '$.each(dataArray, function(key, value){';
							//aca cambio la data con la key dentro del id del elemento padre
							elem += '$("#wsElemCopiesContainer").append(elemToClone);';
							elem += '$("#wsDivCopy"+index+" .control-class-ws-"+key).html(value);';
						//elem += 'alert(key+":"+value);';
						elem += '});';
					//elem += '$(".control-class-ws-"+key).html(value);';
					elem += '});';
					elem += '$("#loading").hide();';
					elem += '});';
      		elem +=	'}';
					elem += '});';
					elem += '</'
					elem += 'script>';
					elem += '</div>';

					$("#"+elemId).html(elem);
	 			}
	 			else{
	 				$("#"+elemId).css(styleAttribute, $(this).val());
				}

	 			editorTag = $("#"+elemEditorId).attr("data-styles");

	 			editorTag += styleAttribute + ":" + $(this).val() + ";";
	 			$("#"+elemEditorId).attr("data-styles", editorTag);
	 		}
 		});
		//Desde aca, antes de hacer el show puedo setear opciones dependiendo el elemento

		closeDesignerPopup();
	}

	//Valida el valor del atributo (edicion del elemento) segun las regex definidas apra el atributo
	function validateFieldValue(styleAttribute, value){
		//La variable con las regex de validacion esta en creator_validation.js
		var re = new RegExp(elementsValidations[styleAttribute]["validation"]);
		if(re.test(value)){
			return true;
		}
		return false;
	}

	//Agrega la funcion al boton del popup, para agregar un elemento hijo adentro de otro
	function insertElem(elemId, elemEditorId) {
		$("#div-button-elem-container-creator").on("click", function(){addPanelElement('contenedor', elemId, elemEditorId); closeAddElementsPopup();});
		$("#div-button-elem-text-creator").on("click", function(){addPanelElement('texto', elemId, elemEditorId);closeAddElementsPopup();});
		$("#div-button-elem-WsContainer-creator").on("click", function(){addPanelElement('wsContenedor', elemId, elemEditorId);closeAddElementsPopup();});

   	$("#elemsCreationPopup").show();
		//Desde aca, antes de hacer el show puedo setear opciones dependiendo el elemento
	}

	function reorderScreenElements(ui, offset){
		//Obtengo la nueva posicion de mi elemento y su id
    index = ui.item.index();
    index -= offset;
    reorderElemId = ui.item.attr("id");

    //Matcheo el id del editor con su elemento de la vista
		reorderElemId = reorderElemId.replace("editor-","");
		// Me guardo el elemento a reubicar
		elemToReorder = $("#"+reorderElemId);
		//obtengo el div padre, en donde reordenare
		parentId = $("#"+reorderElemId).parent().attr("id");

		//Para cada uno de los divs hijos (hermanos del que estoy ordenando), me fijo su nueva posicion en base al elemento reordenado
		i = 0;
		$("#"+parentId).children().each(function (){
		  if(i == index)
		  	elemToReorder.appendTo("#"+parentId);
	  
		  //El elemento a reordenar se agrega solo cuando se encuentra su indice
		  if($(this).attr("id") != reorderElemId)
		  {
				$(this).appendTo("#"+parentId);
				i++;
		  }
		});

		//Esto es por si quedaba ultimo
		if(i == index)
		  elemToReorder.appendTo("#"+parentId);
	}

	//on ready
	//Inicialia los popups ocultos
	$(document).ready(function (){
		//Esconder el popup
   	$("#designPopup").hide();
   	$("#elemsCreationPopup").hide();	

  
   	//Inicializo el sortable apra el editor
		$(function() {
	    $( "#build-screen-elem-options" ).sortable({

	    	update: function(event, ui) {
	        reorderScreenElements(ui, 0);
	      }

	    });

	    $( ".builder-editor-elem-div" ).sortable({
	   		items: "> div.builder-editor-elem-div",

	   		update: function(event, ui) {
	        reorderScreenElements(ui, 1);
	      }
	    });
	    
	  });

	  //callWS();

	});



</script>